1.////////////////////////////////////////////////////////////////////         Insertion          ////////////////////////////////////////////////////////////////////
class DoublyNode {
    int data;
    DoublyNode prev;
    DoublyNode next;

    DoublyNode(int data) {
        this.data = data;
        this.prev = null;
        this.next = null;
    }
}

class DoublyLinkedList  
 {
    DoublyNode head;
    DoublyNode tail;

    DoublyLinkedList() {
        head = null;
        tail = null;
    }

    // Insert a node at the beginning of the list
    void insertAtBeginning(int data) {
        DoublyNode newNode = new DoublyNode(data);
        if (head == null) {
            head = newNode;
            tail = newNode;
        } 
        else {
            newNode.next = head;
            head.prev = newNode;
            head = newNode; 

        }
    }

    // Insert a node at the end of the list
    void insertAtEnd(int data) {
        DoublyNode newNode = new DoublyNode(data);
        if (head == null) {
            head = newNode;
            tail = newNode;
        } 
        else {
            tail.next = newNode; 
            newNode.prev = tail;
            tail = newNode;  

        }
    }

    // Insert a node after a given node
    void insertAfter(DoublyNode prevNode, int data) {
        if (prevNode == null) {
            System.out.println("Previous node cannot be null");
            return;
        }

        DoublyNode newNode = new DoublyNode(data);
        newNode.next = prevNode.next;
        newNode.prev = prevNode;
        prevNode.next = newNode;

        // Update the tail if the node was inserted at the end
        if (newNode.next == null) {
            tail = newNode;
        }
    }

    // Insert a node before a given node
    void insertBefore(DoublyNode nextNode, int data) {
        if (nextNode == null) {
            System.out.println("Next node cannot be null");
            return;
        }

        DoublyNode newNode = new DoublyNode(data);
        newNode.prev = nextNode.prev;
        newNode.next = nextNode;
        nextNode.prev = newNode;

        // Update the head if the node was inserted at the beginning
        if (newNode.prev == null) {
            head = newNode;
        }
    }

    // Print the doubly linked list
    void printList() {
        DoublyNode current = head;
        while (current != null) {
            System.out.print(current.data + " ");
             if(current.next != null){
              System.out.print("-> ");
            }
            current = current.next;
        }
    }
       void printFromLast() {
        DoublyNode current = tail;
        while (current != null) {
            System.out.print(current.data + " ");
             if(current.prev != null){
              System.out.print("-> ");
            }
            current = current.prev;
        }
    }
}

public class DoublyLinkedListInsertion {
    public static void main(String[] args) {
        DoublyLinkedList list = new DoublyLinkedList();

        // Insert nodes at the beginning
        list.insertAtBeginning(1);
        list.insertAtBeginning(2);

        // Insert nodes at the end
        list.insertAtEnd(3);
        list.insertAtEnd(4);

        // Insert a node after a specific node
        DoublyNode nodeAfterWhichToInsert = list.head.next;
        list.insertAfter(nodeAfterWhichToInsert, 5);

        // Insert a node before a specific node
        DoublyNode nodeBeforeWhichToInsert = list.tail;
        list.insertBefore(nodeBeforeWhichToInsert, 6);

        // Print the doubly linked list
        list.printList();
    }
}


output:
2 1 5 3 4 






2. ///////////////////////////////////////////////////////////////////////       Deletion  /////////////////////////////////////////////////////////////////////////////////////////////


