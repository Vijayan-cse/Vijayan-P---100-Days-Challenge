Problem:   Given two arrays: a1[0..n-1] of size n and a2[0..m-1] of size m, where both arrays may contain duplicate elements. The task is to determine whether array a2 is a subset of array a1. 
           It's important to note that both arrays can be sorted or unsorted. Additionally, each occurrence of a duplicate element within an array is considered as a separate element of the set.

Solutions:
1.Using Two pointer method

class Compute {
    public String isSubset( long a1[], long a2[], long n, long m) {
        
        Arrays.sort(a1);
        Arrays.sort(a2);
        
        int i=0,j=0;
        while(i<n && j<m){
            if(a1[i]==a2[j]){
                i++;
                j++;
            }
            else if(a1[i] < a2[j]){
                i++;
            }
            else{
                return "No";
            }
        }
        return (j==m)?"Yes":"No";
    }
}

Time Complexity: O(nlogn + mlogm)
Space complexity:  O(logn+logm)


2.Using HashMap


class Compute {
    public String isSubset( long a1[], long a2[], long n, long m) {
        
       Map<Long,Integer> m=new HashMap<>();
       
       for(long num:a1){
           m.put(num, m.getOrDefault(num,0)+1);
       }
       
       for(long num:a2){
           if(!m.containsKey(num) || m.get(num)==0){
               return "No";
           }
           else{
               m.put(num,get(num)-1);
           }
       }
       return "Yes";
    }
}
Time Complexity: Time Complexity: 𝑂(𝑛+𝑚)
Space Complexity: O(n)
