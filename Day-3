Quick Sort in Java

public class QuickSort{
    public static void QuickSort(int[] arr,int low,int high){
        
        if(low < high){
            int mid=low+(high-low)/2;
            int pivot=arr[mid];
            int i=low;
            int j=high;
        
        
        while(i <= j){
            while(arr[i] < pivot)
                i++;
                while(arr[j] > pivot)
                j--;
                
                if(i <= j){
                     swap(arr,i,j);
                    i++;
                    j--;
                }
            }
            
         if(low < j)
             QuickSort(arr,low,j);
             if(high > i)
             QuickSort(arr,i,high);
         }
    }
         private static void swap(int[] arr,int i,int j){
             int temp=arr[i];
                 arr[i]=arr[j];
                 arr[j]=temp;
         }
         
    public static void main(String[] args){
        int arr[]={3,7,9,2,5,1,8}; 
        int n=arr.length;
        
        System.out.println("Before sort:");
        for(int i:arr){
            System.out.print(i +" ");
        }
        
        System.out.println();
        
        QuickSort(arr,0,n-1);
        
        System.out.println("After Sort:");
        for(int i:arr){
            System.out.print(i +" ");
        }
    }
}

output:
Before sort:
3 7 9 2 5 1 8 
After Sort:
1 2 3 5 7 8 9 


Time complexity: Best/Average case: n logn ,  worst case:n^2
space complexity:   Best/Average case: o(log n),  worst case:O(n)
