1.Quick Sort in Java

public class QuickSort{
    public static void QuickSort(int[] arr,int low,int high){
        
        if(low < high){
            int mid=low+(high-low)/2;
            int pivot=arr[mid];
            int i=low;
            int j=high;
        
        
        while(i <= j){
            while(arr[i] < pivot)
                i++;
                while(arr[j] > pivot)
                j--;
                
                if(i <= j){
                     swap(arr,i,j);
                    i++;
                    j--;
                }
            }
            
         if(low < j)
             QuickSort(arr,low,j);
             if(high > i)
             QuickSort(arr,i,high);
         }
    }
         private static void swap(int[] arr,int i,int j){
             int temp=arr[i];
                 arr[i]=arr[j];
                 arr[j]=temp;
         }
         
    public static void main(String[] args){
        int arr[]={3,7,9,2,5,1,8}; 
        int n=arr.length;
        
        System.out.println("Before sort:");
        for(int i:arr){
            System.out.print(i +" ");
        }
        
        System.out.println();
        
        QuickSort(arr,0,n-1);
        
        System.out.println("After Sort:");
        for(int i:arr){
            System.out.print(i +" ");
        }
    }
}

output:
Before sort:
3 7 9 2 5 1 8 
After Sort:
1 2 3 5 7 8 9 


Time complexity: Best/Average case: n logn ,  worst case:n^2
space complexity:   Best/Average case: o(log n),  worst case:O(n)




2.Merge Sort
public class MergeSort{
    
    public static void MergeSort(int[] arr,int low,int high){
        if(low < high){
        int mid=low+(high-low)/2;
        
        MergeSort(arr,low,mid);
        MergeSort(arr,mid+1,high);
        
        mergeArray(arr,low,mid,high);
        
    }
    }
    
    private static void mergeArray(int[] arr,int low,int mid,int high){
        int n1=mid-low+1;
        int n2=high-mid;
        
        int[] leftArray = new int[n1];
        int[] rightArray = new int[n2];
        
        for(int i=0;i<n1;i++){
            leftArray[i]=arr[low+i];
        }
        for(int i=0;i<n2;i++){
            rightArray[i]=arr[mid+1+i];
        }
        int i=0;
        int j=0;
        int k=low;
        
        while(i < n1 && j < n2){
            if(leftArray[i] <= rightArray[j]){
                arr[k]=leftArray[i];
                i++;
            }
            else{
                arr[k]=rightArray[j];
                j++;
            }
            k++;
        }
            
            while(i<n1){
                arr[k]=leftArray[i];
                i++;
                k++;
            }
            while(j<n2){
                arr[k]=rightArray[j];
                j++;
                k++;
            }
    }
    
    public static void main(String[] args){
        int[] arr= {4,1,7,9,3,2};
        
        System.out.print("Before sorted: ");
        for(int i:arr){
            System.out.print(i+" ");
        }
        
        MergeSort(arr,0,arr.length-1);
        
        System.out.println();
        
        System.out.print("After sorted: ");
        for(int i:arr){
            System.out.print(i+" ");
        }
    }
}

output:
Before sorted: 4 1 7 9 3 2 
After sorted: 1 2 3 4 7 9 

Time complexity:O(n logn)
Space complexity:O(n)



3.Bubble Sort
public class BubbleSort{
    
    public static void BubbleSort(int[] arr){
        int temp=0;
        for(int i=0;i<arr.length-1;i++){
            boolean flag=false;
            for(int j=0;j<arr.length-i-1;j++){
                if(arr[j] > arr[j+1]){
                    temp=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=temp;
                    flag=true;
                }
            }
            if(flag==false)
            break;
        }
    }
    
    
    public static void main(String[] args){
        int[] arr= {4,1,7,9,3};
        
        System.out.print("Before sorted: ");
        for(int i:arr){
            System.out.print(i+" ");
        }
        
        BubbleSort(arr);
        
        System.out.println();
        
        System.out.print("After sorted: ");
        for(int i:arr){
            System.out.print(i+" ");
        }
}
}

output:
Before Sorted:4,1,7,9,3
After Sorted:1,3,4,7,9

Time Complexity: Wort & average O(n^2) , Best case:O(n)
Space complexity:O(1).




4.Insertion Sort
public class InsertionSort{
    
    public static void insertionSort(int[] arr){
        int n=arr.length;
        
        for(int i=1;i<n;i++){
            int currentElement=arr[i];
            int j=i-1;
            
            while(j >= 0 && arr[j] > currentElement){
                arr[j+1]=arr[j];
                j--;
            }
            arr[j+1] = currentElement;
        }
    }
    
    public static void printArray(int[] arr){
        for(int i:arr){
            System.out.print(i+" ");
        }
        System.out.println();
    }
    
    public static void main(String[] args){
        int[] arr={4,5,2,8,1};
        
        System.out.println("Before Sorted: ");
        printArray(arr);
        
        insertionSort(arr);
        
        System.out.println("After Sorted: ");
        printArray(arr);
         
    }
}

output:
Before Sorted: 
4 5 2 8 1 
After Sorted: 
1 2 4 5 8 


Time Complexity: Wort & average O(n^2) , Best case:O(n)
Space complexity:O(1)
