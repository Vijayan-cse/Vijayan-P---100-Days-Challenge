1.Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].


class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length <= 1) {
            return intervals;
         }
 // sort i of 0th value of each row
        Arrays.sort(intervals,Comparator.comparingInt(i -> i[0]));

        List<int[]> li = new ArrayList<>();
        int[] newInterval = intervals[0]; 
        li.add(newInterval);

        for(int interval[] : intervals){
            if(newInterval[1] >= interval[0]){
                newInterval[1] = Math.max(interval[1],newInterval[1]);
            }
            else{
                newInterval = interval;
                li.add(newInterval);
            }
        }
              return li.toArray(new int[li.size()][]);
    }
}





2.Merge sorted array without extra space
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.



class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int size= m+n-1;
        int p1 = m-1;
        int p2 = n-1;

        while(p1 >= 0 && p2 >= 0){
            if(nums1[p1] > nums2[p2]){
                nums1[size] = nums1[p1];
                p1--;
            }
            else{
                nums1[size] = nums2[p2];
                p2--;
            }
              size--;
        }
          
          while(p1 >= 0){
            nums1[size] = nums1[p1];
            p1--;
            size--;
          }
          while(p2 >= 0){
            nums1[size] = nums2[p2];
            p2--;
            size--;
          }
    }
}
