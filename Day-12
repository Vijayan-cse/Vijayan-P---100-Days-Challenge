1.Set matrix to 0
Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.

You must do it in place.

Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]

class Solution {
    public void setZeroes(int[][] matrix) {
        boolean fRow = false,fCol = false;

        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(matrix[i][j] == 0){
                    if(i==0)
                    fRow = true;
                    if(j == 0)
                    fCol = true;

                    matrix[0][j] = 0;
                    matrix[i][0] = 0;
                }
            }
        }
            //inner matrix
            for(int i=1;i<matrix.length;i++){
                for(int j=1;j<matrix[0].length;j++){
                    if(matrix[0][j] == 0 || matrix[i][0] == 0){
                        matrix[i][j] = 0;
                    }
                }
            }

            if(fRow == true)
            for(int j=0;j<matrix[0].length;j++){
                matrix[0][j] = 0;
            }

            if(fCol == true)
            for(int i=0;i<matrix.length;i++){
                matrix[i][0] = 0;
            }
    }
}








2.pascals triangle
Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]


class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result = new ArrayList<>();
        if(numRows == 0) return result;

        List<Integer> frow = new ArrayList<>();
        frow.add(1);
        result.add(frow);

        if(numRows == 1) return result;

        for(int i=1;i<numRows;i++){
            List<Integer> prevRow = result.get(i-1);
            //new row
            List<Integer> row = new ArrayList<>();
            row.add(1);
            for(int j=0;j<i-1;j++){
               row.add(prevRow.get(j) + prevRow.get(j+1));
            }
            row.add(1);

            result.add(row);
    } 
    return result;
    }
}





3.A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer.

Input: nums = [1,2,3]
Output: [1,3,2]

4 steps: Find pivot,successor,swap,reverse.

class Solution {
    public void nextPermutation(int[] nums) {
        int n = nums. length;
        int pivot = n-2;

        while(pivot >= 0 && nums[pivot] >= nums[pivot+1]){
        pivot--;
        }

        if(pivot >= 0){
            int j = n-1;
            while(nums[j] <= nums[pivot]){
            j--;
            }

            swap(nums,pivot,j);
        }
        reverse(nums,pivot+1);
    }

    public void swap(int[] nums,int pivot,int j){
        int temp = nums[pivot];
        nums[pivot] = nums[j];
        nums[j] = temp;
    }
    public void reverse(int[] nums,int start){
        int end = nums.length-1;

        while(start < end){
          swap(nums,start,end);
          start++;
          end--;
        }
    }
}
