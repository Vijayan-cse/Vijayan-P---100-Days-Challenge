1.class Solution {
    public List<List<Integer>> findDifference(int[] nums1, int[] nums2) {
        return Arrays.asList(getDistinctValues(nums1,nums2) , getDistinctValues(nums2,nums1));
    }
    
    private List<Integer> getDistinctValues(int[] num1,int[] num2){
       Set<Integer> set1=new HashSet<>();
       Set<Integer> set2=new HashSet<>();
          for(int num:num2){
               set2.add(num);
          }
          for(int num:num1){
            if(!set2.contains(num)){
                set1.add(num);
            }
          }
          return new ArrayList<>(set1);
    }
}



2.class Solution {
    public boolean uniqueOccurrences(int[] arr) {

        if(arr.length ==0){
        return false;
        }

        HashMap<Integer,Integer> map=new HashMap<>();

        for(int num:arr){
            if(map.containsKey(num)){
                map.put(num,map.get(num)+1);
            }
            else{
                map.put(num,1);
            }
        }
        Set<Integer> s=new HashSet<>(map.values());
           if(map.size()==s.size()){
            return true;
           }
           
           return false;
    }
}


3.class Solution {
    public String removeStars(String s) {
        Stack<Character> stack=new Stack<>();
        for(char ch:s.toCharArray()){
            if(ch != '*'){
            stack.push(ch);
            }
            else{
                stack.pop();
            }
        }
          StringBuilder sb=new StringBuilder();
          while(!stack.isEmpty()){
            sb.append(stack.pop());
            }
            String result=sb.reverse().toString();
            return result;
    }
}
